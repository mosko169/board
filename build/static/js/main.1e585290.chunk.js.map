{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clientid","boardId","sessionData","sessionId","height","width","fillStyle","strokeStyle","lineWidth","lineCap","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","value","target","responseData","sendDataToServer","handlerResponse","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","response","json","alert","react_default","a","createElement","Form","Group","controlId","Label","Control","type","name","defaultValue","placeholder","Check","label","onClick","handleSaveUserData","Button","variant","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uUAmLeA,kBA1Kb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,SAAU,QAASC,QAAS,KAC1CT,EAAKU,YAAc,CACjBC,UAAW,KAAMC,OAAQ,KAAMC,MAAQ,KAAMC,UAAW,KACxDC,YAAa,KAAMC,UAAW,KAAMC,QAAS,MAG/CjB,EAAKkB,aAAelB,EAAKkB,aAAaC,KAAlBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACpBA,EAAKqB,aAAerB,EAAKqB,aAAaF,KAAlBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KATHA,4EAYNsB,GACXnB,KAAKoB,SAAS,CAACC,MAAOF,EAAMG,OAAOD,6CAGxBF,GACX,IAAII,EAAevB,KAAKwB,mBACxBxB,KAAKyB,gBAAgBF,8CAMrBG,MAAM,SAAU,CAChBC,OAAQ,OACRC,QAAS,CACPC,OAAU,mBACVC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnB5B,SAAUL,KAAKI,MAAMC,SACrBC,QAASN,KAAKI,MAAME,YAErB4B,KAAK,SAASC,GACf,OAAOA,EAASC,iDAIFb,GACdc,MAAM,2EAINA,MAAM,wDAKN,OACAC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,YACpBL,EAAAC,EAAAC,cAACC,EAAA,EAAKG,MAAN,sBACAN,EAAAC,EAAAC,cAACC,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,KAAK,WAAWC,aAAchD,KAAKI,MAAMC,SAAU4C,YAAY,qBAE3FX,EAAAC,EAAAC,cAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpBL,EAAAC,EAAAC,cAACC,EAAA,EAAKG,MAAN,gBACAN,EAAAC,EAAAC,cAACC,EAAA,EAAKI,QAAN,CAAcC,KAAK,SAASE,aAAchD,KAAKI,MAAME,QAAS2C,YAAY,cAE5EX,EAAAC,EAAAC,cAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,oBACpBL,EAAAC,EAAAC,cAACC,EAAA,EAAKS,MAAN,CAAYJ,KAAK,WAAWK,MAAM,eAAeC,QAASpD,KAAKqD,sBAEjEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,QAAQ,UAAUT,KAAK,SAASM,QAASpD,KAAKkB,cAAtD,mBAhEYsC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.1e585290.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport io from 'socket.io-client'; \nimport {$} from 'jquery';\nimport  {Form, Button} from 'react-bootstrap';\n\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {clientid: 'koral', boardId: '1'};\n    this.sessionData = {\n      sessionId: null, height: null, width : null, fillStyle: null, \n      strokeStyle: null, lineWidth: null, lineCap: null\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event){\n    var responseData = this.sendDataToServer();\n    this.handlerResponse(responseData);\n\n  }\n\n\n  sendDataToServer() {\n    fetch('login/', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      clientid: this.state.clientid,\n      boardId: this.state.boardId,\n    })\n  }).then(function(response){ \n    return response.json();   \n   })\n  }\n\n  handlerResponse(responseData){\n    alert('show canvas with meta data');\n  }\n\n  handleSaveUserData(){\n    alert('need to insert that');\n  }\n\n \n  render() {\n    return (\n    <Form>\n      <Form.Group controlId=\"UserName\">\n        <Form.Label>Email address</Form.Label>\n        <Form.Control type=\"text\" name=\"clientId\" defaultValue={this.state.clientid} placeholder=\"Enter User Name\" />\n      </Form.Group>\n      <Form.Group controlId=\"boardId\">\n        <Form.Label>boardId</Form.Label>\n        <Form.Control type=\"number\" defaultValue={this.state.boardId} placeholder=\"board Id\" />\n       </Form.Group>\n      <Form.Group controlId=\"formBasicChecbox\">\n        <Form.Check type=\"checkbox\" label=\"Remmember me\" onClick={this.handleSaveUserData}/>\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\n        Connect\n      </Button>\n    </Form>\n    );\n  }\n\n}\n\nfunction loadCanvas(clientid, sessionId) {\n  var App;\n  App = {};\n  /*\n      Init \n  */\n  function renderCanvas(canvasCtx, canvasBuff) {\n\n    var blob = new Blob([canvasBuff], {type: 'image/png'});\n    var url = URL.createObjectURL(blob);\n    var img = new Image;\n\n    img.onload = function() {\n        canvasCtx.drawImage(this, 0, 0);\n        URL.revokeObjectURL(url);\n    }\n    img.src = url;\n  }\n\n\n  App.init = function() {\n    App.canvas = document.createElement('canvas');\n    App.canvas.className = 'canvas';\n    App.canvas.height = 600;\n    App.canvas.width = 1000;\n    document.getElementsByTagName('article')[0].appendChild(App.canvas);\n    App.ctx = App.canvas.getContext(\"2d\");\n    App.ctx.fillStyle = \"solid\";\n    App.ctx.strokeStyle = \"#333\";\n    App.ctx.lineWidth = 2;\n    App.ctx.lineCap = \"round\";\n    App.socket =  io.connect('http://localhost:3000/clients?clientId=' + clientid+ '&sessionId='+ sessionId);\n    App.socket.on('canvas', canvasBuff => {\n      renderCanvas(App.ctx, canvasBuff);\n    })\n    App.socket.on('draw', function(data) {\n      return App.draw(data.x, data.y, data.type);\n    });\n    App.draw = function(x, y, type) {\n      if (type === \"dragstart\") {\n        App.ctx.beginPath();\n        return App.ctx.moveTo(x, y);\n      } else if (type === \"drag\") {\n        App.ctx.lineTo(x, y);\n        return App.ctx.stroke();\n      } else {\n        return App.ctx.closePath();\n      }\n    };\n  };\n  /*\n      Draw Events\n  */\n  $('canvas').on('drag dragstart dragend', function(e) {\n    var offset, type, x, y;\n    type = e.handleObj.type;\n    offset = $(this).offset();\n    e.offsetX = e.layerX - offset.left;\n    e.offsetY = e.layerY - offset.top;\n    x = e.offsetX;\n    y = e.offsetY;\n    App.draw(x, y, type);\n    App.socket.emit('drawClick', {\n      x: x,\n      y: y,\n      type: type\n    });\n  });\n  $(function() {\n    return App.init();\n  });\n}\n\n\n\nvar screenShopButton = function(){\n  var button = document.createElement('button');\n  button.innerHTML = 'Screen Shot';\n  button.className = \"btn btn-primary\";\n  button.onclick = function(){\n    screenShotAction('mycanvas.png');\n  };\n  document.body.appendChild(button);\n};\n\nfunction screenShotAction(filename){    //download the img\n  var canvas = document.getElementsByClassName('canvas')[0];\n  var lnk = document.createElement('a'), e;\n  lnk.download = filename;\n  lnk.href = canvas.toDataURL(\"image/png;base64\");\n  /// create a \"fake\" click-event to trigger the download\n  e = document.createEvent(\"MouseEvents\");\n  e.initMouseEvent(\"click\", true, true, window,\n                    0, 0, 0, 0, 0, false, false, false,\n                    false, 0, null);\n\n  lnk.dispatchEvent(e);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}